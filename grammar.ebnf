program        ::= { function_definition | global_declaration }
function_definition ::= ["differentiable"] "fn" type_specifier identifier "(" parameter_list ")" compound_statement
parameter_list      ::= parameter { "," parameter } | /* empty */
parameter           ::= type_specifier identifier
global_declaration  ::= "let" type_specifier identifier [ "=" expression ] ";"
type_specifier      ::= "int" | "float" | "double" | "void"
statement           ::= expression_statement
                      | compound_statement
                      | selection_statement
                      | iteration_statement
                      | jump_statement
expression_statement ::= [ expression ] ";"
compound_statement  ::= "{" { declaration | statement } "}"
selection_statement ::= "if" "(" expression ")" statement [ "else" statement ]
iteration_statement ::= "while" "(" expression ")" statement
                      | "for" "(" statement [ expression ] ";" [ expression ] ")" statement
for_declaration     ::= ("let" type_specifier identifier [ "=" expression ]) | [expression]
jump_statement      ::= ("return" [ expression ] | "continue" | "break") ";"
declaration ::= "let" type_specifier identifier [ "=" expression ] ";"
expression            ::= assignment_expression
assignment_expression ::= logical_or_expression assignment_operator assignment_expression
assignment_expression ::= "+=" | "-=" | "/=" | '%='
conditional_expression ::= logical_or_expression
                         | logical_or_expression "?" expression ":" conditional_expression
logical_or_expression  ::= logical_and_expression { "||" logical_or_expression }
logical_and_expression ::= equality_expression { "&&" logical_and_expression }
equality_expression   ::= relational_expression { equality_operator equality_expression }
equality_operator     ::= "!=" | "==" 
relational_expression ::= additive_expression { relational_operator relational_expression }
relational_operator   ::= "<" | ">" | "<=" | ">="
additive_expression   ::= multiplicative_expression { additive_operator additive_expression }
additive_operator     ::= "+" | "-"
multiplicative_expression ::= unary_expression { multiplicative_operator multiplicative_expression }
multiplicative_operator ::= "*" | "/" | "%"
unary_expression      ::= postfix_expression
                         | "!" unary_expression
                         | "-" unary_expression
                         | "++" unary_expression
                         | "--" unary_expression
postfix_expression    ::= primary_expression { postfix_operator }
postfix_operator      ::= "++"
                         | "--"
                         | "[" expression "]"
                         | {"'"} "(" [ argument_list ] ")"
primary_expression    ::= identifier
                         | constant
                         | "(" expression ")"
argument_list         ::= expression { "," expression }
constant ::= integer_constant | floating_constant | string_literal
integer_constant ::= [0-9]+
floating_constant ::= [0-9]*\.[0-9]+([eE][-+]?[0-9]+)?
string_literal ::= "\"" [^\"]* "\""
